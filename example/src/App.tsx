import * as React from 'react';
import {
  StyleSheet,
  View,
  Text,
  Button,
  ScrollView,
  TextInput,
  PermissionsAndroid,
  Platform,
  Alert,
} from 'react-native';
import FtpHandler, { type ProgressInfo } from 'react-native-ftp-handler';
import RNFS from 'react-native-fs';

export default function App() {
  const [status, setStatus] = React.useState('');
  const [files, setFiles] = React.useState<any[]>([]);
  const [host, setHost] = React.useState('eu-central-1.sftpcloud.io');
  const [port, setPort] = React.useState('21');
  const [username, setUsername] = React.useState(
    '1802df535b144cfdab9d727c18f772e0'
  );
  const [password, setPassword] = React.useState(
    'w2T8JQceROSYlEaD19debUJjO68PzWtn'
  );
  const [remotePath, setRemotePath] = React.useState('/');
  const [isUploading, setIsUploading] = React.useState(false);
  const [isDownloading, setIsDownloading] = React.useState(false);
  const [progress, setProgress] = React.useState(0);
  const [newDirName, setNewDirName] = React.useState('');
  const [showNewDirInput, setShowNewDirInput] = React.useState(false);

  React.useEffect(() => {
    // Set up progress listener
    const removeListener = FtpHandler.addProgressListener(
      (info: ProgressInfo) => {
        setProgress(info.progress);
      }
    );

    // Clean up listener on unmount
    return () => {
      removeListener();
    };
  }, []);

  const connect = async () => {
    try {
      const result = await FtpHandler.connect(host, parseInt(port, 10));
      setStatus('K·∫øt n·ªëi: ' + result);
    } catch (error: any) {
      setStatus('L·ªói k·∫øt n·ªëi: ' + error.message);
    }
  };

  const login = async () => {
    try {
      const result = await FtpHandler.login(username, password);
      setStatus('ƒêƒÉng nh·∫≠p: ' + result);
    } catch (error: any) {
      setStatus('L·ªói ƒëƒÉng nh·∫≠p: ' + error.message);
    }
  };

  const listFiles = async () => {
    try {
      const result = await FtpHandler.listFiles(remotePath);
      setFiles(result);
      setStatus('ƒê√£ l·∫•y danh s√°ch file t·ª´: ' + remotePath);
    } catch (error: any) {
      setStatus('L·ªói l·∫•y danh s√°ch: ' + error.message);
    }
  };

  const createDirectory = async () => {
    try {
      if (!newDirName) {
        setShowNewDirInput(true);
        return;
      }

      const newDirPath =
        remotePath === '/' ? '/' + newDirName : remotePath + '/' + newDirName;

      const result = await FtpHandler.makeDirectory(newDirPath);
      setStatus(result);
      setNewDirName('');
      setShowNewDirInput(false);
      await listFiles(); // Refresh file list
    } catch (error: any) {
      setStatus('L·ªói t·∫°o th∆∞ m·ª•c: ' + error.message);
    }
  };

  const deleteSelectedItem = async (path: string, isDirectory: boolean) => {
    try {
      const result = isDirectory
        ? await FtpHandler.deleteDirectory(path)
        : await FtpHandler.deleteFile(path);
      setStatus(result);
      await listFiles(); // Refresh file list
    } catch (error: any) {
      setStatus(
        `L·ªói x√≥a ${isDirectory ? 'th∆∞ m·ª•c' : 't·ªáp tin'}: ` + error.message
      );
    }
  };

  // H√†m xin quy·ªÅn truy c·∫≠p b·ªô nh·ªõ
  const requestStoragePermission = async (): Promise<boolean> => {
    if (Platform.OS !== 'android') {
      return true; // iOS kh√¥ng c·∫ßn xin quy·ªÅn ri√™ng
    }

    try {
      // Chuy·ªÉn ƒë·ªïi phi√™n b·∫£n Android th√†nh s·ªë
      const androidVersion = parseInt(Platform.Version.toString(), 10);

      if (androidVersion >= 33) {
        // Android 13 (API 33) tr·ªü l√™n s·ª≠ d·ª•ng quy·ªÅn ri√™ng
        return true; // Kh√¥ng c·∫ßn xin quy·ªÅn n·ªØa v√¨ scoped storage
      } else if (androidVersion >= 29) {
        // Android 10 (API 29) tr·ªü l√™n
        try {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
            {
              title: 'Quy·ªÅn truy c·∫≠p b·ªô nh·ªõ',
              message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ l∆∞u file t·∫£i v·ªÅ',
              buttonNeutral: 'H·ªèi l·∫°i sau',
              buttonNegative: 'T·ª´ ch·ªëi',
              buttonPositive: 'ƒê·ªìng √Ω',
            }
          );
          return granted === PermissionsAndroid.RESULTS.GRANTED;
        } catch (err) {
          console.warn(err);
          return false;
        }
      } else {
        // Android 9 v√† c≈© h∆°n
        const readGranted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
          {
            title: 'Quy·ªÅn ƒë·ªçc b·ªô nh·ªõ',
            message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ ƒë·ªçc file trong b·ªô nh·ªõ',
            buttonNeutral: 'H·ªèi l·∫°i sau',
            buttonNegative: 'T·ª´ ch·ªëi',
            buttonPositive: 'ƒê·ªìng √Ω',
          }
        );

        const writeGranted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: 'Quy·ªÅn ghi b·ªô nh·ªõ',
            message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ l∆∞u file t·∫£i v·ªÅ',
            buttonNeutral: 'H·ªèi l·∫°i sau',
            buttonNegative: 'T·ª´ ch·ªëi',
            buttonPositive: 'ƒê·ªìng √Ω',
          }
        );

        return (
          readGranted === PermissionsAndroid.RESULTS.GRANTED &&
          writeGranted === PermissionsAndroid.RESULTS.GRANTED
        );
      }
    } catch (err) {
      console.warn(err);
      return false;
    }
  };

  const downloadFile = async (remoteFilePath: string) => {
    try {
      // Xin quy·ªÅn truy c·∫≠p b·ªô nh·ªõ
      const hasPermission = await requestStoragePermission();

      if (!hasPermission) {
        Alert.alert(
          'Quy·ªÅn b·ªã t·ª´ ch·ªëi',
          'B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p b·ªô nh·ªõ ƒë·ªÉ t·∫£i file',
          [{ text: 'OK' }]
        );
        setStatus('Kh√¥ng th·ªÉ t·∫£i xu·ªëng: Quy·ªÅn l∆∞u tr·ªØ b·ªã t·ª´ ch·ªëi');
        return;
      }

      const fileName = remoteFilePath.split('/').pop();
      let downloadPath;

      if (Platform.OS === 'ios') {
        downloadPath = `${RNFS.DocumentDirectoryPath}/${fileName}`;
      } else {
        downloadPath = `${RNFS.DownloadDirectoryPath}/${fileName}`;
      }

      setProgress(0);
      setIsDownloading(true);
      setStatus('ƒêang t·∫£i xu·ªëng...');

      const result = await FtpHandler.downloadFile(
        remoteFilePath,
        downloadPath
      );

      // Th√¥ng b√°o th√†nh c√¥ng v√† hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n
      Alert.alert(
        'T·∫£i xu·ªëng ho√†n t·∫•t',
        `File ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: ${downloadPath}`,
        [{ text: 'OK' }]
      );

      setStatus(`T·∫£i xu·ªëng ho√†n t·∫•t: ${result}`);
    } catch (error: any) {
      setStatus('L·ªói t·∫£i xu·ªëng: ' + error.message);
    } finally {
      setIsDownloading(false);
    }
  };

  const uploadFile = async () => {
    try {
      // For this example, let's use a test file that we'll create temporarily
      const fileName = 'test_upload.txt';
      const localPath = `${RNFS.CachesDirectoryPath}/${fileName}`;

      // Create a test file
      await RNFS.writeFile(
        localPath,
        'This is a test file for FTP upload',
        'utf8'
      );

      const uploadPath =
        remotePath === '/' ? '/' + fileName : remotePath + '/' + fileName;

      setProgress(0);
      setIsUploading(true);
      const result = await FtpHandler.uploadFile(localPath, uploadPath);
      setStatus(`T·∫£i l√™n ho√†n t·∫•t: ${result}`);
      await listFiles(); // Refresh file list
    } catch (error: any) {
      setStatus('L·ªói t·∫£i l√™n: ' + error.message);
    } finally {
      setIsUploading(false);
    }
  };

  const stopTransfer = async () => {
    try {
      const result = await FtpHandler.stopCurrentTask();
      setStatus(result);
    } catch (error: any) {
      setStatus('L·ªói d·ª´ng t√°c v·ª•: ' + error.message);
    }
  };

  const disconnect = async () => {
    try {
      const result = await FtpHandler.disconnect();
      setStatus('Ng·∫Øt k·∫øt n·ªëi: ' + result);
      setFiles([]);
    } catch (error: any) {
      setStatus('L·ªói ng·∫Øt k·∫øt n·ªëi: ' + error.message);
    }
  };

  const navigateToDirectory = async (dirPath: string) => {
    setRemotePath(dirPath);
    try {
      const result = await FtpHandler.listFiles(dirPath);
      setFiles(result);
      setStatus('ƒê√£ m·ªü th∆∞ m·ª•c: ' + dirPath);
    } catch (error: any) {
      setStatus('L·ªói m·ªü th∆∞ m·ª•c: ' + error.message);
    }
  };

  const renderProgressBar = () => {
    if (isUploading || isDownloading) {
      return (
        <View style={styles.progressContainer}>
          <Text>
            {isUploading ? 'ƒêang t·∫£i l√™n' : 'ƒêang t·∫£i xu·ªëng'}: {progress}%
          </Text>
          <View style={styles.progressBackground}>
            <View style={[styles.progressFill, { width: `${progress}%` }]} />
          </View>
          <Button title="D·ª´ng" onPress={stopTransfer} />
        </View>
      );
    }
    return null;
  };

  const renderFileItem = (file: any, index: number) => {
    const isDirectory = file.type === 'directory';
    const filePath =
      remotePath === '/' ? '/' + file.name : remotePath + '/' + file.name;

    return (
      <View key={index} style={styles.fileItem}>
        <Text
          style={[styles.fileName, isDirectory && styles.directoryName]}
          onPress={() => isDirectory && navigateToDirectory(filePath)}
        >
          {isDirectory ? 'üìÅ ' : 'üìÑ '} {file.name}
        </Text>
        <Text style={styles.fileSize}>
          {isDirectory ? '' : `${Math.round(file.size / 1024)} KB`}
        </Text>
        <View style={styles.fileActions}>
          {!isDirectory && (
            <Button title="T·∫£i v·ªÅ" onPress={() => downloadFile(filePath)} />
          )}
          <Button
            title="X√≥a"
            color="red"
            onPress={() => deleteSelectedItem(filePath, isDirectory)}
          />
        </View>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>FTP Client</Text>

      <ScrollView style={styles.form}>
        <TextInput
          style={styles.input}
          placeholder="Host"
          value={host}
          onChangeText={setHost}
        />
        <TextInput
          style={styles.input}
          placeholder="Port"
          value={port}
          onChangeText={setPort}
          keyboardType="number-pad"
        />
        <TextInput
          style={styles.input}
          placeholder="Username"
          value={username}
          onChangeText={setUsername}
        />
        <TextInput
          style={styles.input}
          placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />

        <View style={styles.buttonContainer}>
          <Button title="K·∫øt n·ªëi" onPress={connect} />
          <Button title="ƒêƒÉng nh·∫≠p" onPress={login} />
          <Button title="Ng·∫Øt k·∫øt n·ªëi" onPress={disconnect} />
        </View>

        <Text style={styles.status}>{status}</Text>

        {renderProgressBar()}

        <View style={styles.pathContainer}>
          <Text>ƒê∆∞·ªùng d·∫´n hi·ªán t·∫°i: {remotePath}</Text>
          {remotePath !== '/' && (
            <Button
              title="Quay l·∫°i"
              onPress={() => {
                const parentPath = remotePath.substring(
                  0,
                  remotePath.lastIndexOf('/')
                );
                navigateToDirectory(parentPath || '/');
              }}
            />
          )}
        </View>

        <View style={styles.buttonContainer}>
          <Button title="Li·ªát k√™ files" onPress={listFiles} />
          <Button
            title="T·∫°o th∆∞ m·ª•c"
            onPress={() => setShowNewDirInput(true)}
          />
          <Button title="T·∫£i l√™n file" onPress={uploadFile} />
        </View>

        {showNewDirInput && (
          <View style={styles.newDirContainer}>
            <TextInput
              style={styles.input}
              placeholder="T√™n th∆∞ m·ª•c m·ªõi"
              value={newDirName}
              onChangeText={setNewDirName}
            />
            <View style={styles.dirButtons}>
              <Button title="T·∫°o" onPress={createDirectory} />
              <Button
                title="H·ªßy"
                color="gray"
                onPress={() => {
                  setShowNewDirInput(false);
                  setNewDirName('');
                }}
              />
            </View>
          </View>
        )}

        <Text style={styles.listHeader}>Danh s√°ch t·ªáp tin:</Text>
        <View style={styles.fileList}>
          {files.length === 0 ? (
            <Text>Kh√¥ng c√≥ t·ªáp tin n√†o</Text>
          ) : (
            files.map(renderFileItem)
          )}
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginVertical: 10,
  },
  form: {
    flex: 1,
  },
  input: {
    height: 40,
    borderWidth: 1,
    borderColor: '#cccccc',
    borderRadius: 5,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginVertical: 10,
    flexWrap: 'wrap',
  },
  status: {
    marginVertical: 10,
    padding: 5,
    backgroundColor: '#f0f0f0',
    borderRadius: 5,
  },
  progressContainer: {
    marginVertical: 10,
    padding: 10,
    backgroundColor: '#e0e0e0',
    borderRadius: 5,
  },
  progressBackground: {
    height: 10,
    backgroundColor: '#e0e0e0',
    borderRadius: 5,
    marginVertical: 8,
    width: '100%',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#2196F3',
    borderRadius: 5,
  },
  pathContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 10,
    padding: 5,
    backgroundColor: '#f5f5f5',
    borderRadius: 5,
  },
  newDirContainer: {
    marginVertical: 10,
    padding: 10,
    backgroundColor: '#f5f5f5',
    borderRadius: 5,
  },
  dirButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  listHeader: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 10,
    marginBottom: 5,
  },
  fileList: {
    borderWidth: 1,
    borderColor: '#cccccc',
    borderRadius: 5,
    padding: 5,
  },
  fileItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 5,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  fileName: {
    flex: 2,
  },
  directoryName: {
    fontWeight: 'bold',
    color: '#2050b0',
  },
  fileSize: {
    flex: 1,
    textAlign: 'right',
  },
  fileActions: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
});
